name: .Net build and test
description: Build and test all .Net projects in working directory.

inputs:
  configuration:
    description: "The .Net configuration to use for builds and tests, Debug or Release"
    required: true
  use-msbuild:
    description: "Use MSBuild instead of dotnet CLI"
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Build
      shell: pwsh
      run: |
        $ErrorActionPreference = 'Stop'
        $projects = Get-ChildItem -Recurse | Where-Object {
          $_.Name -like "*.csproj" -and ($_.FullName -replace '\\', '/') -notlike "*/Examples/*"
        }
        if ($projects.Count -eq 0) {
          throw "No *.csproj files found. Did you forget to clone the repository?"
        }
        $projects | ForEach-Object {
          if ("${{ inputs.use-msbuild }}" -eq "true") {
            msbuild /t:Restore $_.FullName
            if(!$?) { Exit $LASTEXITCODE }
            msbuild /p:Configuration="${{ inputs.configuration }}" /m $_.FullName
            if(!$?) { Exit $LASTEXITCODE }
          } else {
            dotnet build --configuration "${{ inputs.configuration }}"  $_.FullName
            if(!$?) { Exit $LASTEXITCODE }
          }
        }

    - name: Test
      shell: pwsh
      run: |
        $ErrorActionPreference = 'Stop'
        $projects = Get-ChildItem -Recurse | Where-Object {
          $_.Name -like "*Tests.csproj" -and ($_.FullName -replace '\\', '/') -notlike "*/Examples/*"
        }
        if ($projects.Count -eq 0) {
          throw "No *Tests.csproj files found. Did you forget to clone the repository?"
        }
        $projects | ForEach-Object {
          dotnet test --configuration "${{ inputs.configuration }}" --verbosity normal $_.FullName
          if(!$?) { Exit $LASTEXITCODE }
        }
