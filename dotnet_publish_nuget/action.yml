name: .Net Publish NuGet package
description: Pack, create a GitHub release, publish to GitHub Packages, publish to NuGet

inputs:
  version:
    description: Semantic version to use for package
    required: true
  csproj-path:
    description: Path to .csproj file
    required: true
  configuration:
    description: The .Net configuration to use for packing, Debug or Release
    default: Release
  save-to-gh-artifact:
    description: If true the NuGet package will be saved to GitHub artifacts
    default: "false"
  package-name:
    description: The NuGet package name
    required: true
  create-github-release:
    description: If true a GitHub release will be created, with the NuGet package attached
    default: "false"
  github-release-git-tag:
    description: The tag to use for the GitHub release. Required if create-github-release is true
    default: ""
  repository:
    description: The GitHub repository
    required: true
  repository-owner:
    description: The GitHub repository owner
    required: true
  publish-to-github-packages:
    description: If true the NuGet package will be pushed to GitHub Packages registry
    default: "false"
  github-token:
    description: The GitHub token used to authenticate with GitHub Packages registry
    default: ""
  publish-to-nuget:
    description: If true the NuGet package will be pushed to NuGet registry
    default: "false"
  nuget-api-key:
    description: The NuGet API key
    default: ""

runs:
  using: "composite"
  steps:
    - name: Check github-release-git-tag requirement
      shell: pwsh
      run: |
        if ((${env:create_github_release} -eq 'true') -and -not ${env:github_release_git_tag}) {
          Write-Host "github-release-git-tag should be set if create-github-release is true"
          exit 1
        }
      env:
        create_github_release: ${{ inputs.create-github-release }}
        github_release_git_tag: ${{ inputs.github-release-git-tag }}

    - name: Check github-token requirement
      shell: pwsh
      run: |
        if ((${env:publish_to_github_packages} -eq 'true' -or ${env:create_github_release} -eq 'true') -and -not ${env:github_token}) {
          Write-Host "github-token should be set if publish-to-github-packages or create-github-release is true"
          exit 1
        }
      env:
        publish_to_github_packages: ${{ inputs.publish-to-github-packages }}
        create_github_release: ${{ inputs.create-github-release }}
        github_token: ${{ inputs.github-token }}

    - name: Check nuget-api-key requirement
      shell: pwsh
      run: |
        if ((${env:publish_to_nuget} -eq 'true') -and -not ${env:nuget_api_key}) {
          Write-Host "nuget-api-key should be set if publish-to-nuget is true"
          exit 1
        }
      env:
        publish_to_nuget: ${{ inputs.publish-to-nuget }}
        nuget_api_key: ${{ inputs.nuget-api-key }}

    - name: Pack project
      shell: pwsh
      run: |
        dotnet pack ./${{ inputs.csproj-path }} --configuration ${{ inputs.configuration }} /p:Version=${{ inputs.version }} --no-build --output ./out

    - name: Upload NuGet package to GitHub Artifacts
      if: fromJSON(inputs.save-to-gh-artifact)
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.package-name }}
        path: ./out/${{ inputs.package-name }}.${{ inputs.version }}.nupkg
        if-no-files-found: error

    - name: Create GitHub Release
      if: fromJSON(inputs.create-github-release)
      env:
        GITHUB-TOKEN: ${{ inputs.github-token }}
      shell: pwsh
      run: |
        gh release create ${{ inputs.github-release-git-tag }} --repo ${{ inputs.repository }} --title "${{ inputs.package-name }} v${{ inputs.version }}" --notes "The package ``${{ inputs.package-name }}`` has been released in version ${{ inputs.version }}."

    - name: Upload NuGet package to GitHub Release
      if: fromJSON(inputs.create-github-release)
      env:
        GITHUB-TOKEN: ${{ inputs.github-token }}
      shell: pwsh
      run: |
        gh release upload ${{ inputs.github-release-git-tag }} ./out/${{ inputs.package-name }}.${{ inputs.version }}.nupkg --repo ${{ inputs.repository }}

    - name: Publish to GitHub Packages
      if: fromJSON(inputs.publish-to-github-packages)
      shell: pwsh
      run: |
        dotnet nuget push ./out/${{ inputs.package-name }}.${{ inputs.version }}.nupkg --api-key ${{ inputs.github-token }} --source https://nuget.pkg.github.com/${{ inputs.repository-owner }}/index.json

    - name: Publish to NuGet
      if: fromJSON(inputs.publish-to-nuget)
      shell: pwsh
      run: |
        dotnet nuget push ./out/${{ inputs.package-name }}.${{ inputs.version }}.nupkg --api-key ${{ inputs.nuget-api-key }} --source https://api.nuget.org/v3/index.json
