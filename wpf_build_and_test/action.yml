name: WPF build and test
description: Build and test a WPF application

inputs:
  package-project-path:
    description: Path to the .wapproj file
    required: true
  package-project-dir:
    description: Directory containing the package project
    required: true
  test-project-path:
    description: Path to test project
    default: ""
  configuration:
    description: The .Net configuration to use for packing, Debug or Release
    default: Release
  target-platform:
    description: The platform to target
    default: x64
  save-to-github-artifact:
    description: If true the build will be saved to GitHub artifacts
    default: "false"
  pfx-certificate:
    description: Base64 encoded PFX certificate used to sign the build
    default: ""
  pfx-password:
    description: Password of the PFX certificate
    default: ""

runs:
  using: "composite"
  steps:
    - name: Decode certificate
      shell: pwsh
      if: inputs.pfx-certificate != ''
      run: |
        $pfxCertificate = "${{ inputs.pfx-certificate }}"
        $pfxCertificate | Out-File -FilePath mycert.b64
        certutil -decode mycert.b64 mycert.pfx

    - name: Restore
      shell: pwsh
      run: msbuild ${{ inputs.package-project-path }} /t:Restore /p:Configuration=${{ inputs.configuration }} /p:RuntimeIdentifier=win-${{ inputs.target-platform }}

    - name: Build for ${{ inputs.configuration }}
      shell: pwsh
      run: |
        $buildArgs = @(
          "/p:Platform=${{ inputs.target-platform }}"
          "/p:Configuration=${{ inputs.configuration }}"
          "/p:UapAppxPackageBuildMode=SideloadOnly"
          "/p:AppxBundle=Never"
        )
        if ("${{ inputs.pfx-certificate }}" -ne '') {
          $buildArgs += "/p:PackageCertificateKeyFile=.\mycert.pfx"
          $buildArgs += "/p:PackageCertificatePassword=${{ inputs.pfx-password }}"
        }
        msbuild ${{ inputs.package-project-path }} $buildArgs

    - name: Test
      shell: pwsh
      if: inputs.test-project-path != ''
      run: dotnet test ${{ inputs.test-project-path }}

    - name: Remove certificate files
      shell: pwsh
      if: inputs.pfx-certificate != ''
      run: |
        Remove-Item -Path .\mycert.b64
        Remove-Item -Path .\mycert.pfx

    - name: Upload build to GitHub Artifacts
      if: fromJSON(inputs.save-to-github-artifact)
      uses: actions/upload-artifact@v3
      with:
        name: Build_${{ inputs.configuration }}_${{ inputs.target-platform }}
        path: ${{ inputs.package-project-dir }}\AppPackages\*
        if-no-files-found: error
